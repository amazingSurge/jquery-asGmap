{"version":3,"sources":["jquery-asGmap.es.js"],"names":["global","factory","define","amd","exports","require","mod","jQuery","jqueryAsGmapEs","this","_jquery","_classCallCheck","instance","Constructor","TypeError","_jquery2","obj","__esModule","default","_interopRequireDefault","_typeof","Symbol","iterator","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","DEFAULTS","namespace","apikey","mapType","backgroundcolor","defaultui","doubleclickzoom","maptypecontrol","maxzoom","minzoom","pancontrol","rotatecontrol","scalecontrol","scrollwheel","streetviewcontrol","styles","zoom","zoomcontrol","controlspositions","pan","rotate","scale","streetView","latitude","longitude","address","markers","icon","url","size","anchor","markercenter","content","popup","onInit","onReady","instances","googleMapsApiLoaded","AsGmap","element","options","$element","extend","data","addClass","initialized","_trigger","window","google","maps","init","push","loadScript","value","script","document","createElement","type","src","location","protocol","body","appendChild","_this","mapOptions","backgroundColor","center","LatLng","disableDefaultUI","defaultuI","disableDoubleClickZoom","draggable","keyboardShortcuts","mapTypeControl","mapTypeControlOptions","mapTypeId","MapTypeId","maptype","maxZoom","minZoom","panControl","panControlOptions","rotateControl","rotateControlOptions","scaleControl","scaleControlOptions","streetViewControl","streetViewControlOptions","zoomControl","zoomControlOptions","position","process","map","Map","addMarker","addMarkers","geocoder","Geocoder","geocode","result","geometry","opts","_this2","markerOptions","Size","Point","marker","Marker","setMap","infowindow","InfoWindow","event","addListener","open","hasOwnProperty","array","eventType","_len","arguments","params","Array","_key","concat","trigger","NAMESPACE$1","onFunction","replace","word","substring","toUpperCase","apply","isPlainObject"],"mappings":"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","file":"jquery-asGmap.min.js","sourcesContent":["/**\n* jQuery asGmap v0.3.5\n* https://github.com/amazingSurge/jquery-asGmap\n*\n* Copyright (c) amazingSurge\n* Released under the LGPL-3.0 license\n*/\nimport $ from 'jquery';\n\nvar DEFAULTS = {\n  namespace: 'gmap',\n\n  apikey: '',\n  mapType: 'ROADMAP', // ROADMAP, SATELLITE, HYBRID, TERRAIN\n\n  // map options\n  backgroundcolor: '#e5e3df', // Color used for the background of the Map div.\n  defaultui: true, // Enables/disables all default UI.\n  doubleclickzoom: false, // Enables/disables zoom and center on double click.\n  maptypecontrol: true, // The initial enabled/disabled state of the Map type control.\n  maxzoom: null, // The maximum zoom level which will be displayed on the map. If omitted, or set to null, the maximum zoom from the current map type is used instead.\n  minzoom: null, // The minimum zoom level which will be displayed on the map. If omitted, or set to null, the minimum zoom from the current map type is used instead.\n  pancontrol: false, // The enabled/disabled state of the Pan control.\n  rotatecontrol: false, // The enabled/disabled state of the Rotate control.\n  scalecontrol: false, // The initial enabled/disabled state of the Scale control.\n  scrollwheel: false, // If false, disables scrollwheel zooming on the map.\n  streetviewcontrol: false, // The initial enabled/disabled state of the Street View Pegman control.\n  styles: false, // Styles to apply to each of the default map types.\n  zoom: 3, // The initial Map zoom level\n  zoomcontrol: true, // The enabled/disabled state of the Zoom control.\n\n  controlspositions: {\n    mapType: null,\n    pan: null,\n    rotate: null,\n    scale: null,\n    streetView: null,\n    zoom: null\n  },\n\n  // position\n  latitude: null,\n  longitude: null,\n  address: '',\n\n  // markers\n  markers: [],\n  icon: {\n    url: \"http://www.google.com/mapfiles/marker.png\",\n    size: [20, 34],\n    anchor: [9, 34]\n  },\n\n  // marker\n  markercenter: true,\n  content: '',\n  popup: true,\n\n  // callback\n  onInit: null,\n  onReady: null\n};\n\nconst NAMESPACE$1 = 'asGmap';\nlet instances = [];\nlet googleMapsApiLoaded = false;\n\nclass AsGmap {\n  constructor(element, options) {\n    this.element = element;\n    this.$element = $(element);\n\n    this.options = $.extend(true, {}, DEFAULTS, options, this.$element.data());\n\n    this.namespace = this.options.namespace;\n\n    this.$element.addClass(this.namespace);\n\n    // flag\n    this.initialized = false;\n\n    this._trigger('init');\n\n    if (!(typeof window.google === 'object' && window.google.maps)) {\n      instances.push(this);\n      this.loadScript();\n    } else {\n      this.init();\n    }\n  }\n\n  loadScript() {\n    if (googleMapsApiLoaded) {\n      return;\n    }\n    googleMapsApiLoaded = true;\n    const script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    const key = this.options.apikey? `&key=${this.options.apikey}`: \"\";\n    script.src = `${document.location.protocol}//maps.googleapis.com/maps/api/js?callback=asGmapOnScriptLoaded${key}`;\n    document.body.appendChild(script);\n  }\n\n  init() {\n    const options = this.options;\n\n    const mapOptions = {\n      backgroundColor: options.backgroundcolor,\n      center: new window.google.maps.LatLng(options.latitude, options.longitude),\n      disableDefaultUI: !options.defaultuI,\n      disableDoubleClickZoom: !options.doubleclickzoom,\n      draggable: true,\n      keyboardShortcuts: true,\n      mapTypeControl: options.maptypecontrol,\n      mapTypeControlOptions: {},\n      mapTypeId: window.google.maps.MapTypeId[options.maptype],\n      maxZoom: options.maxzoom,\n      minZoom: options.minzoom,\n      panControl: options.pancontrol,\n      panControlOptions: {},\n      rotateControl: options.rotatecontrol,\n      rotateControlOptions: {},\n      scaleControl: options.scalecontrol,\n      scaleControlOptions: {},\n      scrollwheel: options.scrollwheel,\n      streetViewControl: options.streetviewcontrol,\n      streetViewControlOptions: {},\n      zoom: options.zoom,\n      zoomControl: options.zoomcontrol,\n      zoomControlOptions: {}\n    };\n\n    if (options.controlspositions.mapType) {\n      mapOptions.mapTypeControlOptions.position = options.controlspositions.mapType;\n    }\n    if (options.controlspositions.pan) {\n      mapOptions.panControlOptions.position = options.controlspositions.pan;\n    }\n    if (options.controlspositions.rotate) {\n      mapOptions.rotateControlOptions.position = options.controlspositions.rotate;\n    }\n    if (options.controlspositions.scale) {\n      mapOptions.scaleControlOptions.position = options.controlspositions.scale;\n    }\n    if (options.controlspositions.streetView) {\n      mapOptions.streetViewControlOptions.position = options.controlspositions.streetView;\n    }\n    if (options.controlspositions.zoom) {\n      mapOptions.zoomControlOptions.position = options.controlspositions.zoom;\n    }\n    if (options.styles) {\n      mapOptions.styles = options.styles;\n    }\n\n    let process = () => {\n      this.map = new window.google.maps.Map(this.element, mapOptions);\n\n      if (this.options.markercenter) {\n        this.addMarker({\n          latitude: options.latitude,\n          longitude: options.longitude,\n          address: options.address,\n          content: options.content,\n          popup: options.popup\n        });\n      }\n\n      this.addMarkers(this.options.markers);\n\n      this.initialized = true;\n      this._trigger('ready');\n    };\n\n    this.geocoder = new window.google.maps.Geocoder();\n\n    if (options.address) {\n      this.geocoder.geocode({\n        address: options.address\n      }, result => {\n        if (result && result.length) {\n          mapOptions.center = result[0].geometry.location;\n        }\n        process();\n      });\n    } else {\n      process();\n    }\n  }\n\n  getMap() {\n    return this.map;\n  }\n\n  addMarker(opts) {\n    const markerOptions = {};\n\n    opts = $.extend({\n      icon: this.options.icon,\n      content: '',\n      popup: false\n    }, opts);\n\n    markerOptions.icon = {\n      url: opts.icon.url,\n      size: new window.google.maps.Size(opts.icon.size[0], opts.icon.size[1]),\n      anchor: new window.google.maps.Point(opts.icon.anchor[0], opts.icon.anchor[1])\n    };\n\n    let process = () => {\n      const marker = new window.google.maps.Marker(markerOptions);\n      marker.setMap(this.map);\n\n      if (opts.content) {\n        const infowindow = new window.google.maps.InfoWindow({\n          content: `<div class=\"${this.namespace}-content\">${opts.content}</div>`\n        });\n\n        window.google.maps.event.addListener(marker, 'click', () => {\n          infowindow.open(this.map, marker);\n        });\n\n        if (opts.popup) {\n          infowindow.open(this.map, marker);\n        }\n      }\n    };\n\n    if (opts.hasOwnProperty('latitude') && opts.hasOwnProperty('longitude') && opts.latitude && opts.longitude) {\n      markerOptions.position = new window.google.maps.LatLng(opts.latitude, opts.longitude);\n\n      process();\n    } else if (opts.hasOwnProperty('address')) {\n      this.geocoder.geocode({\n        address: opts.address\n      }, result => {\n        if (result && result.length) {\n          markerOptions.position = result[0].geometry.location;\n          process();\n        }\n      });\n    }\n  }\n\n  addMarkers(array) {\n    for (let i = 0; i < array.length; i++) {\n      this.addMarker(array[i]);\n    }\n\n    return this.markers;\n  }\n\n   _trigger(eventType, ...params) {\n    let data = [this].concat(params);\n\n    // event\n    this.$element.trigger(`${NAMESPACE$1}::${eventType}`, data);\n\n    // callback\n    eventType = eventType.replace(/\\b\\w+\\b/g, (word) => {\n      return word.substring(0, 1).toUpperCase() + word.substring(1);\n    });\n    let onFunction = `on${eventType}`;\n\n    if (typeof this.options[onFunction] === 'function') {\n      this.options[onFunction].apply(this, params);\n    }\n  }\n\n  destroy() {\n    this.$element.data(NAMESPACE$1, null);\n    this._trigger('destroy');\n  }\n\n  static setDefaults(options) {\n    $.extend(true, DEFAULTS, $.isPlainObject(options) && options);\n  }\n}\n\nwindow.asGmapOnScriptLoaded = () => {\n  for (const instance of instances) {\n    instance.init();\n  }\n};\n\nvar info = {\n  version:'0.3.5'\n};\n\nconst NAMESPACE = 'asGmap';\nconst OtherAsGmap = $.fn.asGmap;\n\nconst jQueryAsGmap = function(options, ...args) {\n  if (typeof options === 'string') {\n    const method = options;\n\n    if (/^_/.test(method)) {\n      return false;\n    } else if ((/^(get)/.test(method))) {\n      const instance = this.first().data(NAMESPACE);\n      if (instance && typeof instance[method] === 'function') {\n        return instance[method](...args);\n      }\n    } else {\n      return this.each(function() {\n        const instance = $.data(this, NAMESPACE);\n        if (instance && typeof instance[method] === 'function') {\n          instance[method](...args);\n        }\n      });\n    }\n  }\n\n  return this.each(function() {\n    if (!$(this).data(NAMESPACE)) {\n      $(this).data(NAMESPACE, new AsGmap(this, options));\n    }\n  });\n};\n\n$.fn.asGmap = jQueryAsGmap;\n\n$.asGmap = $.extend({\n  setDefaults: AsGmap.setDefaults,\n  noConflict: function() {\n    $.fn.asGmap = OtherAsGmap;\n    return jQueryAsGmap;\n  }\n}, info);\n"]}